// This file is automatically generated by JSDoc; regenerate it with ../build_doc.sh
DocsData = {
  "Driver": {
    "kind": "class",
    "locus": "Anywhere",
    "longname": "Driver",
    "name": "Driver",
    "options": [],
    "params": [
      {
        "name": "id"
      },
      {
        "name": "group"
      },
      {
        "name": "user"
      },
      {
        "name": "currentRide"
      }
    ],
    "scope": "global",
    "summary": "Represents a driver."
  },
  "Driver.delete": {
    "kind": "function",
    "longname": "Driver.delete",
    "memberof": "Driver",
    "name": "delete",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Delete functionality for the driver instance"
  },
  "Driver.save": {
    "kind": "function",
    "longname": "Driver.save",
    "memberof": "Driver",
    "name": "save",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Saving functionality for the driver instance"
  },
  "Driver.stopDriving": {
    "kind": "function",
    "longname": "Driver.stopDriving",
    "memberof": "Driver",
    "name": "stopDriving",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Revoke a user's driver status if they are not currently giving a ride."
  },
  "DriverDashboardController": {
    "kind": "member",
    "locus": "Client",
    "longname": "DriverDashboardController",
    "name": "DriverDashboardController",
    "scope": "global",
    "summary": "The controller for the Driver Dashboard."
  },
  "DriverDashboardController.action": {
    "kind": "function",
    "longname": "DriverDashboardController.action",
    "memberof": "DriverDashboardController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders page when ready."
  },
  "DriverDashboardController.data": {
    "kind": "function",
    "longname": "DriverDashboardController.data",
    "memberof": "DriverDashboardController",
    "name": "data",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Passes ride and driver information from the group."
  },
  "DriverDashboardController.isReady": {
    "kind": "function",
    "longname": "DriverDashboardController.isReady",
    "memberof": "DriverDashboardController",
    "name": "isReady",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks that geolocation is not empty before rendering."
  },
  "DriverDashboardController.onBeforeAction": {
    "kind": "function",
    "longname": "DriverDashboardController.onBeforeAction",
    "memberof": "DriverDashboardController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "DriverDashboardController.waitOn": {
    "kind": "function",
    "longname": "DriverDashboardController.waitOn",
    "memberof": "DriverDashboardController",
    "name": "waitOn",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Waits for ride and driver information from the group."
  },
  "Drivers": {
    "kind": "member",
    "locus": "Anywhere",
    "longname": "Drivers",
    "name": "Drivers",
    "scope": "global",
    "summary": "Creates a collection of drivers in the MongoDB",
    "type": {
      "names": [
        "Meteor.Collection"
      ]
    }
  },
  "ForgotPassword.events.click #reset_password_sent": {
    "kind": "function",
    "locus": "Client",
    "longname": "ForgotPassword.events.click #reset_password_sent",
    "memberof": "ForgotPassword.events.click ",
    "name": "reset_password_sent",
    "options": [],
    "params": [
      {
        "name": "e",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "t",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Displays OK box after password email is sent.."
  },
  "ForgotPassword.events.submit #forgot_password_form": {
    "kind": "function",
    "locus": "Client",
    "longname": "ForgotPassword.events.submit #forgot_password_form",
    "memberof": "ForgotPassword.events.submit ",
    "name": "forgot_password_form",
    "options": [],
    "params": [
      {
        "name": "e",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "t",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Sends the reset password link to the user."
  },
  "ForgotPassword.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "ForgotPassword.helpers.errorMessage",
    "memberof": "ForgotPassword.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>errorMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the current error message."
  },
  "ForgotPassword.helpers.resetPasswordSent": {
    "kind": "function",
    "locus": "Client",
    "longname": "ForgotPassword.helpers.resetPasswordSent",
    "memberof": "ForgotPassword.helpers",
    "name": "resetPasswordSent",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>resetPasswordSent</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Checks to see if the reset password email has been sent.."
  },
  "ForgotPassword.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "ForgotPassword.rendered",
    "memberof": "ForgotPassword",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Displays the forgot password dialog on the screen."
  },
  "ForgotPasswordController": {
    "kind": "member",
    "locus": "Client",
    "longname": "ForgotPasswordController",
    "name": "ForgotPasswordController",
    "scope": "global",
    "summary": "The controller for the Forgot Password interface."
  },
  "ForgotPasswordController.action": {
    "kind": "function",
    "longname": "ForgotPasswordController.action",
    "memberof": "ForgotPasswordController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render page."
  },
  "ForgotPasswordController.onBeforeAction": {
    "kind": "function",
    "longname": "ForgotPasswordController.onBeforeAction",
    "memberof": "ForgotPasswordController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "Group": {
    "kind": "class",
    "locus": "Anywhere",
    "longname": "Group",
    "name": "Group",
    "options": [],
    "params": [
      {
        "description": "<p>The ID of the group.</p>",
        "name": "id"
      },
      {
        "description": "<p>The name of the group.</p>",
        "name": "name"
      },
      {
        "description": "<p>The user who administrates the group.</p>",
        "name": "admin"
      },
      {
        "description": "<p>An array of the members of the group.</p>",
        "name": "members"
      },
      {
        "description": "<p>An array of the current drivers of the group.</p>",
        "name": "drivers"
      },
      {
        "description": "<p>An array of the current ride requests in the group.</p>",
        "name": "queue"
      },
      {
        "description": "<p>The password to join the group.</p>",
        "name": "key"
      }
    ],
    "scope": "global",
    "summary": "Represents a group as a class. The constructor takes a document."
  },
  "Group.addDriver": {
    "kind": "function",
    "longname": "Group.addDriver",
    "memberof": "Group",
    "name": "addDriver",
    "options": [],
    "params": [
      {
        "name": "driver"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Add driver to group driver array."
  },
  "Group.addMember": {
    "kind": "function",
    "longname": "Group.addMember",
    "memberof": "Group",
    "name": "addMember",
    "options": [],
    "params": [
      {
        "name": "memberId"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Add specific member to group member array"
  },
  "Group.addRideToQueue": {
    "kind": "function",
    "longname": "Group.addRideToQueue",
    "memberof": "Group",
    "name": "addRideToQueue",
    "options": [],
    "params": [
      {
        "name": "ride"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Add ride to group ride queue"
  },
  "Group.changeAdmin": {
    "kind": "function",
    "longname": "Group.changeAdmin",
    "memberof": "Group",
    "name": "changeAdmin",
    "options": [],
    "params": [
      {
        "name": "newAdmin"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Change group admin to specified user"
  },
  "Group.changeKey": {
    "kind": "function",
    "longname": "Group.changeKey",
    "memberof": "Group",
    "name": "changeKey",
    "options": [],
    "params": [
      {
        "name": "newKey"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Change group key to new specified key"
  },
  "Group.delete": {
    "kind": "function",
    "longname": "Group.delete",
    "memberof": "Group",
    "name": "delete",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Deletes a group instance with an empty members array."
  },
  "Group.forceDelete": {
    "kind": "function",
    "longname": "Group.forceDelete",
    "memberof": "Group",
    "name": "forceDelete",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Deletes a group instance after removing all members."
  },
  "Group.membersModel": {
    "kind": "function",
    "longname": "Group.membersModel",
    "memberof": "Group",
    "name": "membersModel",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the array of members in the group."
  },
  "Group.removeAllFromQueue": {
    "kind": "function",
    "longname": "Group.removeAllFromQueue",
    "memberof": "Group",
    "name": "removeAllFromQueue",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Remove all rides from group ride queue"
  },
  "Group.removeDriver": {
    "kind": "function",
    "longname": "Group.removeDriver",
    "memberof": "Group",
    "name": "removeDriver",
    "options": [],
    "params": [
      {
        "name": "driver"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Remove driver from group driver array"
  },
  "Group.removeMember": {
    "kind": "function",
    "longname": "Group.removeMember",
    "memberof": "Group",
    "name": "removeMember",
    "options": [],
    "params": [
      {
        "name": "memberId"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Remove specific member from group member array."
  },
  "Group.removeRideFromQueue": {
    "kind": "function",
    "longname": "Group.removeRideFromQueue",
    "memberof": "Group",
    "name": "removeRideFromQueue",
    "options": [],
    "params": [
      {
        "name": "rideId"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Remove ride from group ride queue"
  },
  "Group.save": {
    "kind": "function",
    "longname": "Group.save",
    "memberof": "Group",
    "name": "save",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Saving functionality for the group instance."
  },
  "GroupSettings.events.click #deleteGroupButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.events.click #deleteGroupButton",
    "memberof": "GroupSettings.events.click ",
    "name": "deleteGroupButton",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Deletes the group."
  },
  "GroupSettings.events.click .changeKey": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.events.click .changeKey",
    "memberof": "GroupSettings.events.click ",
    "name": "changeKey",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Allows the user to change the group key for the group they are in."
  },
  "GroupSettings.events.click .makeAdmin": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.events.click .makeAdmin",
    "memberof": "GroupSettings.events.click ",
    "name": "makeAdmin",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Makes the selected user the admin of the group."
  },
  "GroupSettings.events.click .removeMember": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.events.click .removeMember",
    "memberof": "GroupSettings.events.click ",
    "name": "removeMember",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Removes a member from the group."
  },
  "GroupSettings.helpers.groupMembers": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.helpers.groupMembers",
    "memberof": "GroupSettings.helpers",
    "name": "groupMembers",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Members"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the members in the current group."
  },
  "GroupSettings.helpers.groupModel": {
    "kind": "function",
    "locus": "Client",
    "longname": "GroupSettings.helpers.groupModel",
    "memberof": "GroupSettings.helpers",
    "name": "groupModel",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Group"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the current group."
  },
  "GroupSettingsController": {
    "kind": "member",
    "locus": "Client",
    "longname": "GroupSettingsController",
    "name": "GroupSettingsController",
    "scope": "global",
    "summary": "The controller for the Group Settings page."
  },
  "GroupSettingsController.action": {
    "kind": "function",
    "longname": "GroupSettingsController.action",
    "memberof": "GroupSettingsController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render page."
  },
  "GroupSettingsController.data": {
    "kind": "function",
    "longname": "GroupSettingsController.data",
    "memberof": "GroupSettingsController",
    "name": "data",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "*"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns group information."
  },
  "GroupSettingsController.onBeforeAction": {
    "kind": "function",
    "longname": "GroupSettingsController.onBeforeAction",
    "memberof": "GroupSettingsController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "GroupSettingsController.waitOn": {
    "kind": "function",
    "longname": "GroupSettingsController.waitOn",
    "memberof": "GroupSettingsController",
    "name": "waitOn",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Waits for group information."
  },
  "Groups": {
    "kind": "member",
    "locus": "Anywhere",
    "longname": "Groups",
    "name": "Groups",
    "scope": "global",
    "summary": "Creates a collection of groups in the MongoDB",
    "type": {
      "names": [
        "Meteor.Collection"
      ]
    }
  },
  "Login.created": {
    "kind": "function",
    "locus": "Client",
    "longname": "Login.created",
    "memberof": "Login",
    "name": "created",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Sets an empty error message once a user is logged in."
  },
  "Login.events.submit #login_form": {
    "kind": "function",
    "locus": "Client",
    "longname": "Login.events.submit #login_form",
    "memberof": "Login.events.submit ",
    "name": "login_form",
    "options": [],
    "params": [
      {
        "name": "e",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "t",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Checks to make sure that the login credentials are correct and then logs in user."
  },
  "Login.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "Login.helpers.errorMessage",
    "memberof": "Login.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>errorMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Fetches the current error message."
  },
  "Login.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "Login.rendered",
    "memberof": "Login",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the login screen."
  },
  "LoginController": {
    "kind": "member",
    "locus": "Client",
    "longname": "LoginController",
    "name": "LoginController",
    "scope": "global",
    "summary": "Controller for the Login screen."
  },
  "LoginController.action": {
    "kind": "function",
    "longname": "LoginController.action",
    "memberof": "LoginController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render page when ready."
  },
  "LoginController.onBeforeAction": {
    "kind": "function",
    "longname": "LoginController.onBeforeAction",
    "memberof": "LoginController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "LogoutController": {
    "kind": "member",
    "locus": "Client",
    "longname": "LogoutController",
    "name": "LogoutController",
    "scope": "global",
    "summary": "Controller for the logout view."
  },
  "LogoutController.action": {
    "kind": "function",
    "longname": "LogoutController.action",
    "memberof": "LogoutController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "The user logs out."
  },
  "LogoutController.onBeforeAction": {
    "kind": "function",
    "longname": "LogoutController.onBeforeAction",
    "memberof": "LogoutController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Checks that the user does want to logout, also checks if they are a driver."
  },
  "Meteor.methods.changeAdmin": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.changeAdmin",
    "memberof": "Meteor.methods",
    "name": "changeAdmin",
    "options": [],
    "params": [
      {
        "name": "newAdmin",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Changes the admin of the desired group."
  },
  "Meteor.methods.createNewUser": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.createNewUser",
    "memberof": "Meteor.methods",
    "name": "createNewUser",
    "options": [],
    "params": [
      {
        "description": "<p>A string of user's email</p>",
        "name": "email",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "description": "<p>The name of the user</p>",
        "name": "name",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "description": "<p>password The user's temporary password</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Creates a new user in the database."
  },
  "Meteor.methods.createUserAccount": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.createUserAccount",
    "memberof": "Meteor.methods",
    "name": "createUserAccount",
    "options": [
      {
        "name": "username",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "email",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "password",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "profile",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "params": [
      {
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Creates a new user account in the database."
  },
  "Meteor.methods.joinGroup": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.joinGroup",
    "memberof": "Meteor.methods",
    "name": "joinGroup",
    "options": [],
    "params": [
      {
        "name": "groupName",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "groupKey",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "group.id"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Adds the current user to the group using the group key."
  },
  "Meteor.methods.removeMember": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.removeMember",
    "memberof": "Meteor.methods",
    "name": "removeMember",
    "options": [],
    "params": [
      {
        "name": "memberToRemove",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "group",
        "type": {
          "names": [
            "Group"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Removes a member from the database."
  },
  "Meteor.methods.sendMail": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.sendMail",
    "memberof": "Meteor.methods",
    "name": "sendMail",
    "options": [
      {
        "name": "username",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "email",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "password",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "profile",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "roles",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "params": [
      {
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Sends an email using the provided options."
  },
  "Meteor.methods.updateUserAccount": {
    "kind": "function",
    "locus": "Server",
    "longname": "Meteor.methods.updateUserAccount",
    "memberof": "Meteor.methods",
    "name": "updateUserAccount",
    "options": [
      {
        "name": "username",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "email",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "password",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "profile",
        "type": {
          "names": [
            "String"
          ]
        }
      },
      {
        "name": "roles",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "params": [
      {
        "name": "options",
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Updates the desired user account with the options provided."
  },
  "Register.created": {
    "kind": "function",
    "locus": "Client",
    "longname": "Register.created",
    "memberof": "Register",
    "name": "created",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Sets an empty error and success message once a user is created."
  },
  "Register.events.submit #register_form": {
    "kind": "function",
    "locus": "Client",
    "longname": "Register.events.submit #register_form",
    "memberof": "Register.events.submit ",
    "name": "register_form",
    "options": [],
    "params": [
      {
        "name": "e",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "t",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Checks to make sure that the login credentials are valid and then creates user."
  },
  "Register.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "Register.helpers.errorMessage",
    "memberof": "Register.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>successMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Fetches the current success message."
  },
  "Register.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "Register.rendered",
    "memberof": "Register",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the register screen."
  },
  "RegisterController": {
    "kind": "member",
    "locus": "Client",
    "longname": "RegisterController",
    "name": "RegisterController",
    "scope": "global",
    "summary": "Controller for register view."
  },
  "RegisterController.action": {
    "kind": "function",
    "longname": "RegisterController.action",
    "memberof": "RegisterController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render the page."
  },
  "RegisterController.onBeforeAction": {
    "kind": "function",
    "longname": "RegisterController.onBeforeAction",
    "memberof": "RegisterController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "ResetPassword.events.submit #reset_password_form": {
    "kind": "function",
    "locus": "Client",
    "longname": "ResetPassword.events.submit #reset_password_form",
    "memberof": "ResetPassword.events.submit ",
    "name": "reset_password_form",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Submits the reset password form after error checking."
  },
  "ResetPassword.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "ResetPassword.helpers.errorMessage",
    "memberof": "ResetPassword.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>errorMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Fetches the current error message."
  },
  "ResetPasswordController": {
    "kind": "member",
    "locus": "Client",
    "longname": "ResetPasswordController",
    "name": "ResetPasswordController",
    "scope": "global",
    "summary": "Controller for the Reset Password view"
  },
  "ResetPasswordController.action": {
    "kind": "function",
    "longname": "ResetPasswordController.action",
    "memberof": "ResetPasswordController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render the page."
  },
  "ResetPasswordController.onBeforeAction": {
    "kind": "function",
    "longname": "ResetPasswordController.onBeforeAction",
    "memberof": "ResetPasswordController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "Ride": {
    "kind": "class",
    "longname": "Ride",
    "name": "Ride",
    "options": [],
    "params": [
      {
        "name": "id"
      },
      {
        "name": "user"
      },
      {
        "name": "group"
      },
      {
        "name": "pickupLoc"
      },
      {
        "name": "destLoc"
      },
      {
        "name": "createdAt"
      }
    ],
    "scope": "global",
    "summary": "Represents a ride."
  },
  "Ride.assignTo": {
    "kind": "function",
    "longname": "Ride.assignTo",
    "memberof": "Ride",
    "name": "assignTo",
    "options": [],
    "params": [
      {
        "name": "driver"
      }
    ],
    "scope": "static",
    "summary": "Assign a ride to a driver"
  },
  "Ride.cancel": {
    "kind": "function",
    "longname": "Ride.cancel",
    "memberof": "Ride",
    "name": "cancel",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Cancel a ride that has been requested."
  },
  "Ride.delete": {
    "kind": "function",
    "longname": "Ride.delete",
    "memberof": "Ride",
    "name": "delete",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Delete functionality for the ride instance."
  },
  "Ride.save": {
    "kind": "function",
    "longname": "Ride.save",
    "memberof": "Ride",
    "name": "save",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Saving functionality for the ride instance."
  },
  "RiderDashboardController": {
    "kind": "member",
    "locus": "Client",
    "longname": "RiderDashboardController",
    "name": "RiderDashboardController",
    "scope": "global",
    "summary": "Controller for Rider Dashboard view."
  },
  "RiderDashboardController.action": {
    "kind": "function",
    "longname": "RiderDashboardController.action",
    "memberof": "RiderDashboardController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render the page when ready."
  },
  "RiderDashboardController.data": {
    "kind": "function",
    "longname": "RiderDashboardController.data",
    "memberof": "RiderDashboardController",
    "name": "data",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Return group and user data."
  },
  "RiderDashboardController.isReady": {
    "kind": "function",
    "longname": "RiderDashboardController.isReady",
    "memberof": "RiderDashboardController",
    "name": "isReady",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Check if the geolocation is null."
  },
  "RiderDashboardController.onBeforeAction": {
    "kind": "function",
    "longname": "RiderDashboardController.onBeforeAction",
    "memberof": "RiderDashboardController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "RiderDashboardController.waitOn": {
    "kind": "function",
    "longname": "RiderDashboardController.waitOn",
    "memberof": "RiderDashboardController",
    "name": "waitOn",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Wait for group and user data to arrive."
  },
  "Rides": {
    "kind": "member",
    "locus": "Anywhere",
    "longname": "Rides",
    "name": "Rides",
    "scope": "global",
    "summary": "Create a collection of rides in the MongoDB",
    "type": {
      "names": [
        "Meteor.Collection"
      ]
    }
  },
  "User": {
    "kind": "class",
    "locus": "Anywhere",
    "longname": "User",
    "name": "User",
    "options": [],
    "params": [],
    "scope": "global",
    "summary": "Represents a user."
  },
  "User.becomeAdmin": {
    "kind": "function",
    "longname": "User.becomeAdmin",
    "memberof": "User",
    "name": "becomeAdmin",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Become admin of current group."
  },
  "User.becomeDriver": {
    "kind": "function",
    "longname": "User.becomeDriver",
    "memberof": "User",
    "name": "becomeDriver",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Become driver of current group."
  },
  "User.createGroup": {
    "kind": "function",
    "longname": "User.createGroup",
    "memberof": "User",
    "name": "createGroup",
    "options": [],
    "params": [
      {
        "name": "newGroupName"
      },
      {
        "name": "newGroupKey"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Create a new group and become the admin of that group."
  },
  "User.joinGroup": {
    "kind": "function",
    "longname": "User.joinGroup",
    "memberof": "User",
    "name": "joinGroup",
    "options": [],
    "params": [
      {
        "name": "groupName"
      },
      {
        "name": "groupKey"
      },
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Join an already existing group using the group name and key."
  },
  "User.leaveGroup": {
    "kind": "function",
    "longname": "User.leaveGroup",
    "memberof": "User",
    "name": "leaveGroup",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Remove user from current group."
  },
  "User.stopDriving": {
    "kind": "function",
    "longname": "User.stopDriving",
    "memberof": "User",
    "name": "stopDriving",
    "options": [],
    "params": [
      {
        "name": "callback"
      }
    ],
    "scope": "static",
    "summary": "Revoke driver status of user."
  },
  "User.updateLocation": {
    "kind": "function",
    "longname": "User.updateLocation",
    "memberof": "User",
    "name": "updateLocation",
    "options": [],
    "params": [
      {
        "name": "lat"
      },
      {
        "name": "lng"
      }
    ],
    "scope": "static",
    "summary": "Set location of user."
  },
  "UserSettingsChangePass.created": {
    "kind": "function",
    "locus": "Client",
    "longname": "UserSettingsChangePass.created",
    "memberof": "UserSettingsChangePass",
    "name": "created",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Sets an empty error and info message once the form is rendered."
  },
  "UserSettingsChangePass.events.submit #change_pass_form": {
    "kind": "function",
    "locus": "Client",
    "longname": "UserSettingsChangePass.events.submit #change_pass_form",
    "memberof": "UserSettingsChangePass.events.submit ",
    "name": "change_pass_form",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Checks to see if the old password is correct and then resets the password."
  },
  "UserSettingsChangePass.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "UserSettingsChangePass.helpers.errorMessage",
    "memberof": "UserSettingsChangePass.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>errorMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Fetches the current error message."
  },
  "UserSettingsChangePass.helpers.infoMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "UserSettingsChangePass.helpers.infoMessage",
    "memberof": "UserSettingsChangePass.helpers",
    "name": "infoMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>infoMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Fetches the current info message."
  },
  "UserSettingsChangePass.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "UserSettingsChangePass.rendered",
    "memberof": "UserSettingsChangePass",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the change password screen."
  },
  "UserSettingsController": {
    "kind": "member",
    "locus": "Client",
    "longname": "UserSettingsController",
    "name": "UserSettingsController",
    "scope": "global",
    "summary": "Controller for the User Settings view."
  },
  "UserSettingsController.action": {
    "kind": "function",
    "longname": "UserSettingsController.action",
    "memberof": "UserSettingsController",
    "name": "action",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Render the page."
  },
  "UserSettingsController.onBeforeAction": {
    "kind": "function",
    "longname": "UserSettingsController.onBeforeAction",
    "memberof": "UserSettingsController",
    "name": "onBeforeAction",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Go on to action."
  },
  "driverDashboard.destroyed": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.destroyed",
    "memberof": "driverDashboard",
    "name": "destroyed",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Removes the driver dashboard template from the screen."
  },
  "driverDashboard.events.click #confirm-dropoff-button": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.events.click #confirm-dropoff-button",
    "memberof": "driverDashboard.events.click ",
    "name": "confirm-dropoff-button",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Confirms that the Rider has been dropped off successfully."
  },
  "driverDashboard.events.click #dest-navigation-button": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.events.click #dest-navigation-button",
    "memberof": "driverDashboard.events.click ",
    "name": "dest-navigation-button",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Launches navigation to the navigation location."
  },
  "driverDashboard.events.click #pickup-navigation-button": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.events.click #pickup-navigation-button",
    "memberof": "driverDashboard.events.click ",
    "name": "pickup-navigation-button",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Launches navigation to the pickup location."
  },
  "driverDashboard.events.click .stopDriving": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.events.click .stopDriving",
    "memberof": "driverDashboard.events.click ",
    "name": "stopDriving",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the first Ride in the queue."
  },
  "driverDashboard.events.click .tab-item": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.events.click .tab-item",
    "memberof": "driverDashboard.events.click ",
    "name": "tab-item",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.template"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Confirms when clicking on a menu item in the side tab."
  },
  "driverDashboard.helpers.firstRide": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.helpers.firstRide",
    "memberof": "driverDashboard.helpers",
    "name": "firstRide",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Ride"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the first Ride in the queue."
  },
  "driverDashboard.helpers.getRideCreatedTime": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.helpers.getRideCreatedTime",
    "memberof": "driverDashboard.helpers",
    "name": "getRideCreatedTime",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>Moment.js object</p>",
        "type": {
          "names": [
            "Moment"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the time at which the ride was created."
  },
  "driverDashboard.helpers.getRideUser": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.helpers.getRideUser",
    "memberof": "driverDashboard.helpers",
    "name": "getRideUser",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Gets the name of the user that requested the ride.."
  },
  "driverDashboard.helpers.rideModel": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.helpers.rideModel",
    "memberof": "driverDashboard.helpers",
    "name": "rideModel",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Ride"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Creates a new Ride."
  },
  "driverDashboard.helpers.ridesAvailable": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.helpers.ridesAvailable",
    "memberof": "driverDashboard.helpers",
    "name": "ridesAvailable",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>true or false</p>",
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines whether or not there are any rides in the current queue."
  },
  "driverDashboard.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "driverDashboard.rendered",
    "memberof": "driverDashboard",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the driver dashboard template on the screen."
  },
  "isValidEmail": {
    "kind": "function",
    "longname": "isValidEmail",
    "name": "isValidEmail",
    "options": [],
    "params": [],
    "scope": "global",
    "summary": "Automatically generated utilities."
  },
  "leftMenu.events.click #becomeDriverButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #becomeDriverButton",
    "memberof": "leftMenu.events.click ",
    "name": "becomeDriverButton",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.Template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Changes the user designation to become a driver."
  },
  "leftMenu.events.click #createGroupButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #createGroupButton",
    "memberof": "leftMenu.events.click ",
    "name": "createGroupButton",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.Template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Opens create group dialog window and makes sure that the group name is not already in use."
  },
  "leftMenu.events.click #dashboardButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #dashboardButton",
    "memberof": "leftMenu.events.click ",
    "name": "dashboardButton",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Opens dashboard menu based on current user role"
  },
  "leftMenu.events.click #joinGroupButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #joinGroupButton",
    "memberof": "leftMenu.events.click ",
    "name": "joinGroupButton",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.Template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Opens join group dialog window and makes sure that the group code is valid."
  },
  "leftMenu.events.click #leaveGroup": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #leaveGroup",
    "memberof": "leftMenu.events.click ",
    "name": "leaveGroup",
    "options": [],
    "params": [
      {
        "name": "event",
        "type": {
          "names": [
            "Event"
          ]
        }
      },
      {
        "name": "template",
        "type": {
          "names": [
            "Meteor.Template"
          ]
        }
      }
    ],
    "scope": "instance",
    "summary": "Leaves the group that the user is currently a member of."
  },
  "leftMenu.events.click #logoutButton": {
    "kind": "function",
    "locus": "Client",
    "longname": "leftMenu.events.click #logoutButton",
    "memberof": "leftMenu.events.click ",
    "name": "logoutButton",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Sends logout request upon clicking logout button"
  },
  "loading.destroyed": {
    "kind": "function",
    "locus": "Client",
    "longname": "loading.destroyed",
    "memberof": "loading",
    "name": "destroyed",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Removes the loading template from the screen"
  },
  "loading.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "loading.rendered",
    "memberof": "loading",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the loading template on the screen"
  },
  "riderDashboard.destroyed": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.destroyed",
    "memberof": "riderDashboard",
    "name": "destroyed",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Removes the rider dashboard from the screen."
  },
  "riderDashboard.events.click .cancelRide": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.events.click .cancelRide",
    "memberof": "riderDashboard.events.click ",
    "name": "cancelRide",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Cancels the current ride."
  },
  "riderDashboard.events.click .requestRide": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.events.click .requestRide",
    "memberof": "riderDashboard.events.click ",
    "name": "requestRide",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Request a ride and send to an available driver."
  },
  "riderDashboard.helpers.errorMessage": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.helpers.errorMessage",
    "memberof": "riderDashboard.helpers",
    "name": "errorMessage",
    "options": [],
    "params": [],
    "returns": [
      {
        "description": "<p>errorMessage</p>",
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Returns the current error message."
  },
  "riderDashboard.helpers.isRidePending": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.helpers.isRidePending",
    "memberof": "riderDashboard.helpers",
    "name": "isRidePending",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "Ride"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines whether or not there is a ride pending."
  },
  "riderDashboard.helpers.noDrivers": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.helpers.noDrivers",
    "memberof": "riderDashboard.helpers",
    "name": "noDrivers",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "bool"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "Determines if there are any drivers for the group."
  },
  "riderDashboard.helpers.noRide": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.helpers.noRide",
    "memberof": "riderDashboard.helpers",
    "name": "noRide",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "If user does not have a ride, removes markers from map."
  },
  "riderDashboard.helpers.ridePending": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.helpers.ridePending",
    "memberof": "riderDashboard.helpers",
    "name": "ridePending",
    "options": [],
    "params": [],
    "returns": [
      {
        "type": {
          "names": [
            "void"
          ]
        }
      }
    ],
    "scope": "static",
    "summary": "places markers on map uf ride is pending."
  },
  "riderDashboard.rendered": {
    "kind": "function",
    "locus": "Client",
    "longname": "riderDashboard.rendered",
    "memberof": "riderDashboard",
    "name": "rendered",
    "options": [],
    "params": [],
    "scope": "static",
    "summary": "Renders the rider dashboard on the screen."
  },
  "rightMenu.events.click #accountSettings": {
    "kind": "function",
    "locus": "Client",
    "longname": "rightMenu.events.click #accountSettings",
    "memberof": "rightMenu.events.click ",
    "name": "accountSettings",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Opens the user settings dashboard window."
  },
  "rightMenu.events.click #groupSettings": {
    "kind": "function",
    "locus": "Client",
    "longname": "rightMenu.events.click #groupSettings",
    "memberof": "rightMenu.events.click ",
    "name": "groupSettings",
    "options": [],
    "params": [],
    "scope": "instance",
    "summary": "Opens the group settings dashboard window."
  }
};